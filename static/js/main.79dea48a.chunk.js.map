{"version":3,"sources":["routes.js","redux/auth/auth-actions.js","redux/auth/auth-operations.js","views/AuthBar.js","redux/auth/auth-selectors.js","images/default-avatar.webp","views/UserBar.js","views/NavBar.js","views/HomeView.js","views/AboutView.js","Components/LogIn/LogIn.js","views/LoginView.js","Components/SignUp/SignUp.js","views/SignupView.js","redux/contacts/contact-actions.js","Components/ContactForm/ContactForm.js","redux/contacts/contact-operations.js","redux/contacts/contact-selectors.js","Components/ContactList/ContactList.js","Components/Filter/Filter.js","views/Contacts.js","Components/PrivateRoute.js","Components/PublicRoute.js","App.js","redux/auth/auth-reducers.js","redux/contacts/contact-reducer.js","redux/store.js","index.js"],"names":["registerRequest","createAction","registerSuccess","registerError","loginRequest","loginSuccess","loginError","logoutRequest","logoutSuccess","logoutError","getCurrentUserRequest","getCurrentUserSuccess","getCurrentUserError","axios","defaults","baseURL","token","headers","common","Authorization","AuthBar","className","to","routes","activeClassName","getAuthenticated","state","auth","isLogedIn","getUserName","user","name","mapDispatchToProps","onLogout","dispatch","a","authActions","post","message","connect","authSelector","avatar","defaultAvatar","src","alt","width","type","onClick","isAuthenticated","authSelectors","exact","HomeView","AboutView","LogIn","email","password","handleChange","evt","target","value","setState","handleSubmit","preventDefault","props","onLogin","console","log","reset","this","onSubmit","id","placeholder","onChange","htmlFor","Component","credential","res","data","LoginView","SignUp","onRegister","login","SignupView","fetchContactsRequest","fetchContactsSucces","fetchContactsError","addContactsRequest","addContactsSucces","addContactsError","deleteContactsRequest","deleteContactsSucces","deleteContactsError","filterContact","inputId","shortid","generate","ContactForm","number","onInputChange","addContact","pattern","title","required","contact","then","catch","error","operations","getFilter","contacts","filter","getVisibleContacts","createSelector","items","normalizeFilter","toLowerCase","item","includes","selectors","onDeleteContact","contactId","delete","map","actions","Contacts","fetchContacts","get","component","redirectTo","routeProps","render","restricted","App","onGetCurrentUser","path","getState","persistedToken","response","initialUserState","createReducer","payload","combineReducers","action","contactName","alert","loading","middleware","getDefaultMiddleware","serializableCheck","ignoredActions","FLUSH","REHYDRATE","PAUSE","PERSIST","PURGE","REGISTER","authPersistConfig","key","storage","whitelist","store","configureStore","reducer","persistReducer","authReducers","contactsReducer","devTools","process","persistor","persistStore","ReactDOM","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.79dea48a.chunk.js","sourcesContent":["export default {\r\n    home: \"/\",\r\n    about: \"/about\",\r\n    contact: \"/contact\",\r\n    login: \"/login\",\r\n    signup: \"/signup\",\r\n};","import { createAction } from \"@reduxjs/toolkit\";\r\n\r\nconst registerRequest = createAction('auth/registerRequest');\r\nconst registerSuccess = createAction('auth/registerSuccess');\r\nconst registerError = createAction('auth/registerError');\r\n\r\nconst loginRequest = createAction('auth/loginRequest');\r\nconst loginSuccess = createAction('auth/loginSuccess');\r\nconst loginError = createAction('auth/loginError');\r\n\r\nconst logoutRequest = createAction('auth/logoutRequest');\r\nconst logoutSuccess = createAction('auth/logoutSuccess');\r\nconst logoutError = createAction('auth/logoutError');\r\n\r\nconst getCurrentUserRequest = createAction('auth/getCurrentUserRequest');\r\nconst getCurrentUserSuccess = createAction('auth/getCurrentUserSuccess');\r\nconst getCurrentUserError = createAction('auth/getCurrentUserError');\r\n\r\nexport default {\r\n    registerRequest,\r\n    registerSuccess,\r\n    registerError,\r\n    loginRequest,\r\n    loginSuccess,\r\n    loginError,\r\n    logoutRequest,\r\n    logoutSuccess,\r\n    logoutError,\r\n    getCurrentUserRequest,\r\n    getCurrentUserSuccess,\r\n    getCurrentUserError,\r\n};","import axios from 'axios';\r\nimport authActions from './auth-actions';\r\n\r\naxios.defaults.baseURL = 'https://connections-api.herokuapp.com';\r\n\r\nconst token = {\r\n    set(token) {\r\n        axios.defaults.headers.common.Authorization = `Bearer ${token}`;\r\n     },\r\n    unset() {\r\n        axios.defaults.headers.common.Authorization = '';\r\n     },\r\n};\r\n\r\nexport const register = credential => async dispatch => {\r\n    dispatch(authActions.registerRequest());\r\n\r\n    try {\r\n        const res = await axios.post('/users/signup', credential);\r\n\r\n        token.set(res.data.token);\r\n        dispatch(authActions.registerSuccess(res.data));\r\n     } catch (error) {\r\n        dispatch(authActions.registerError(error.message));\r\n    }; \r\n };\r\n\r\nexport const logIn = credential => async dispatch => {\r\n    dispatch(authActions.loginRequest());\r\n\r\n    try {\r\n        const res = await axios.post('/users/login', credential);\r\n\r\n        token.set(res.data.token);\r\n        dispatch(authActions.loginSuccess(res.data));\r\n    } catch (error) {\r\n        dispatch(authActions.loginError(error.message));\r\n    };\r\n };\r\n\r\nexport const logOut = () => async dispatch => {\r\n    dispatch(authActions.logoutRequest());\r\n\r\n    try {\r\n        await axios.post('/users/logout');\r\n\r\n        token.unset();\r\n      dispatch(authActions.logoutSuccess());\r\n      \r\n    } catch (error) {\r\n        dispatch(authActions.logoutError(error.message));\r\n    };\r\n };\r\n\r\nexport const getCurrentUser = () => async (dispatch, getState) => {\r\n    \r\n  const {\r\n    auth: { token: persistedToken },\r\n  } = getState();\r\n\r\n  if (!persistedToken) {\r\n    return;\r\n  };\r\n\r\n  token.set(persistedToken);\r\n\r\n  dispatch(authActions.getCurrentUserRequest());\r\n\r\n  try {\r\n    const response = await axios.get('/users/current');\r\n\r\n    dispatch(authActions.getCurrentUserSuccess(response.data));\r\n  } catch (error) {\r\n    dispatch(authActions.getCurrentUserError(error.message));\r\n  }\r\n };\r\n\r\n// export default { register, logOut, logIn, getCurrentUser };","import { NavLink } from \"react-router-dom\";\r\nimport routes from \"../routes\";\r\n\r\nconst AuthBar = () => {\r\n    return (\r\n        <div className=\"Nav-Container__right\">\r\n            <NavLink to={routes.login} className=\"link\" activeClassName=\"active-link\">Log in</NavLink>\r\n            <NavLink to={routes.signup} className=\"link\" activeClassName=\"active-link\">Sign up</NavLink>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default AuthBar;","\r\nexport const getAuthenticated = state => state.auth.isLogedIn;\r\n\r\nexport const getUserName = state => state.auth.user.name;\r\n\r\n","export default __webpack_public_path__ + \"static/media/default-avatar.4cff0967.webp\";","import { connect } from 'react-redux';\r\nimport * as authSelector from \"../redux/auth/auth-selectors\";\r\nimport * as authOperation from \"../redux/auth/auth-operations\";\r\nimport defaultAvatar from '../images/default-avatar.webp';\r\n\r\nconst UserBar = ({avatar, name, onLogout}) => {\r\n    return (\r\n        <div className=\"Nav-Container__right\" >\r\n            <img src={avatar} alt={name} width=\"32\" />\r\n            <span className=\"Span\" >Hi, {name}</span>\r\n            <button type=\"button\" className=\"logout-btn\" onClick={onLogout}>\r\n                Logout\r\n            </button>\r\n        </div>\r\n    );\r\n};\r\n\r\nconst mapStateToProps = state => ({\r\n    name: authSelector.getUserName(state),\r\n    avatar: defaultAvatar,\r\n});\r\n\r\nconst mapDispatchToProps = {\r\n    onLogout: authOperation.logOut\r\n};\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(UserBar);","import { connect } from \"react-redux\";\r\nimport { NavLink } from \"react-router-dom\";\r\nimport routes from \"../routes\";\r\nimport AuthBar from \"./AuthBar\";\r\nimport UserBar from \"./UserBar\";\r\nimport * as authSelectors from \"../redux/auth/auth-selectors\";\r\n\r\n\r\nconst NavBar = ({isAuthenticated}) => {\r\n\r\n    return (\r\n        <>\r\n            \r\n        <nav className=\"Nav-Container\">\r\n            <div className=\"Nav-Container__left\">\r\n                <NavLink exact to={routes.home} className=\"link\" activeClassName=\"active-link\">Home</NavLink>\r\n                    <NavLink to={routes.about} className=\"link\" activeClassName=\"active-link\">About</NavLink>\r\n                    <NavLink to={routes.contact} className=\"link\" activeClassName=\"active-link\">Contacts</NavLink>\r\n                </div>\r\n\r\n                {isAuthenticated ? <UserBar /> : <AuthBar />}\r\n        </nav>\r\n              \r\n        </>  \r\n    )\r\n};\r\n\r\nconst mapStateToProps = state => ({\r\n    isAuthenticated: authSelectors.getAuthenticated(state),\r\n});\r\n\r\nexport default connect(mapStateToProps)(NavBar);","\r\nconst HomeView = () => {\r\n\r\n    return (\r\n        <div className=\"Container\">\r\n            <div className=\"Container-title\">\r\n               <h1 className=\"Home-title\">Welcome!</h1>\r\n            <p className=\"Home-text\">Here you can create your own phonebook</p> \r\n            </div>\r\n            \r\n\r\n        </div>\r\n    )\r\n};\r\n\r\nexport default HomeView;","const AboutView = () => {\r\n\r\n    return (\r\n        <div className=\"About-container\">\r\n            <div className=\"About-wrap\">\r\n                <h1 className=\"About-title\">Phonebook app.</h1>\r\n                <p className=\"About-text\">This page will tell you about our application.\r\n                Here you can register and create your own phone book.\r\n                You can add an unlimited number of contacts to be saved\r\n                    on the server.\r\n                To do this, register. If you are already registered, then log into your\r\n                    account and you will get access to your phone book in the Contacts section.</p>\r\n            </div> \r\n        </div>\r\n    )\r\n};\r\n\r\nexport default AboutView;","import React, { Component } from 'react';\r\nimport { connect } from 'react-redux';\r\nimport * as authOperations from '../../redux/auth/auth-operations';\r\n\r\n\r\nclass LogIn extends Component{\r\n  state = {\r\n    email: '',\r\n    password: '',\r\n  };\r\n  \r\n  handleChange = evt => {\r\n    const { name, value } = evt.target;\r\n\r\n    this.setState({ [name]: value });\r\n   };\r\n\r\n  handleSubmit = evt => {\r\n    evt.preventDefault();\r\n    this.props.onLogin(this.state);\r\n\r\n    console.log(\"email :\", this.state.email);\r\n    console.log(\"password :\", this.state.password);\r\n    this.reset();\r\n  };\r\n  \r\n  reset = () => {\r\n    this.setState({ email: \"\", password: \"\" });\r\n  };\r\n  \r\n  render() {\r\n    const { email, password } = this.state;\r\n\r\n        return (\r\n            <>\r\n               <form className=\"form\" onSubmit={this.handleSubmit}>\r\n      <div className=\"title\">Hi!</div>\r\n      <div className=\"subtitle\">Please, log in!</div>\r\n      <div className=\"input-container ic2\">\r\n        <input id=\"email1\" className=\"input\" type=\"text\" placeholder=\" \" value={email} name=\"email\" onChange={this.handleChange} />\r\n        <div className=\"cut cut-short\"></div>\r\n        <label htmlFor=\"email1\" className=\"placeholder\">Email</label>\r\n      </div>\r\n      <div className=\"input-container ic2\">\r\n        <input id=\"password1\" className=\"input\" type=\"text\" placeholder=\" \" value={password} name=\"password\" onChange={this.handleChange} />\r\n        <div className=\"cut\"></div>\r\n        <label htmlFor=\"password1\" className=\"placeholder\">Password</label>\r\n      </div>\r\n      \r\n      <button type=\"text\" className=\"submit\">submit</button>\r\n    </form> \r\n            </>\r\n        );\r\n    };\r\n};\r\n\r\nconst mapDispatchToProps = {\r\n  onLogin: authOperations.logIn,\r\n};\r\n\r\nexport default connect(null, mapDispatchToProps)(LogIn);","import LogIn from \"../Components/LogIn\";\r\n\r\nconst LoginView = () => {\r\n    return (\r\n        <div className=\"Login-container\">\r\n            \r\n            <LogIn />\r\n\r\n        </div>\r\n    )\r\n};\r\n\r\nexport default LoginView;","import React, { Component } from 'react';\r\nimport { connect } from 'react-redux';\r\n// import register from '../../redux/auth/auth-operations';\r\nimport * as authOperations  from '../../redux/auth/auth-operations';\r\n\r\n\r\nclass SignUp extends Component{\r\n    state = {\r\n        name: '',\r\n        email: '',\r\n        password: '',\r\n    };\r\n\r\n    handleChange = evt => {\r\n        const { name, value } = evt.target;\r\n\r\n        this.setState({ [name]: value })\r\n    };\r\n\r\n    handleSubmit = evt => {\r\n      evt.preventDefault();\r\n      \r\n      this.props.onRegister(this.state);\r\n        console.log('login :', this.state.login);\r\n        console.log('email :', this.state.email);\r\n      console.log('password :', this.state.password);\r\n\r\n        this.reset();\r\n    };\r\n    \r\n    reset = () => {\r\n        this.setState({ name: \"\", email: \"\", password: \"\" });\r\n    };\r\n\r\n    render() {\r\n        const { name, email, password } = this.state;\r\n\r\n        return (\r\n             <>\r\n               <form className=\"form\" onSubmit={this.handleSubmit}>\r\n      <div className=\"title\">Welcome</div>\r\n      <div className=\"subtitle\">Let's create your account!</div>\r\n      <div className=\"input-container ic1\">\r\n        <input id=\"name\" className=\"input\" type=\"text\" placeholder=\" \" value={name} name=\"name\" onChange={this.handleChange} />\r\n        <div className=\"cut\"></div>\r\n        <label htmlFor=\"name\" className=\"placeholder\">Name</label>\r\n      </div>\r\n      <div className=\"input-container ic2\">\r\n        <input id=\"email\" className=\"input\" type=\"text\" placeholder=\" \" value={email} name=\"email\" onChange={this.handleChange} />\r\n        <div className=\"cut cut-short\"></div>\r\n        <label htmlFor=\"email\" className=\"placeholder\">Email</label>\r\n      </div>              \r\n      <div className=\"input-container ic2\">\r\n        <input id=\"password\" className=\"input\" type=\"text\" placeholder=\" \" value={password} name=\"password\" onChange={this.handleChange} />\r\n        <div className=\"cut\"></div>\r\n        <label htmlFor=\"password\" className=\"placeholder\">Password</label>\r\n      </div>\r\n      \r\n      <button type=\"text\" className=\"submit\">submit</button>\r\n    </form> \r\n            </>\r\n         )\r\n    };\r\n};\r\n\r\nconst mapDispatchToProps = {\r\n  onRegister: authOperations.register,\r\n};\r\n\r\n// const mapDispatchToProps = (dispatch) => ({\r\n//   onSubmit: (data) => dispatch(authOperations.register(data))\r\n//  });\r\n\r\nexport default connect(null, mapDispatchToProps)(SignUp);","import SignUp from \"../Components/SignUp\";\r\nconst SignupView = () => {\r\n    return (\r\n        <div className=\"Signup-container\">\r\n            <SignUp />\r\n        </div>\r\n    )\r\n};\r\n\r\nexport default SignupView;","import { createAction } from '@reduxjs/toolkit';\r\n\r\n\r\nexport const fetchContactsRequest = createAction('fetchContactsRequest');\r\nexport const fetchContactsSucces = createAction('fetchContactsSucces');\r\nexport const fetchContactsError = createAction('fetchContactsError');\r\n\r\nexport const addContactsRequest = createAction('addContactsRequest');\r\nexport const addContactsSucces = createAction('addContactsSucces');\r\nexport const addContactsError = createAction('addContactsError');\r\n\r\nexport const deleteContactsRequest = createAction('deleteContactsRequest');\r\nexport const deleteContactsSucces = createAction('deleteContactsSucces');\r\nexport const deleteContactsError = createAction('deleteContactsError');\r\n\r\n\r\nexport const filterContact = createAction('fitlerContact');","\r\nimport React, { Component } from 'react';\r\nimport { connect } from \"react-redux\";\r\nimport shortid from \"shortid\";\r\nimport * as operations from '../../redux/contacts/contact-operations';\r\n\r\n const inputId = shortid.generate();\r\nclass ContactForm extends Component{\r\n    state = {\r\n        name: '',\r\n        number: ''\r\n    };\r\n\r\n    onInputChange = evt => {\r\n        this.setState({\r\n            [evt.target.name]: evt.target.value\r\n        });\r\n    };\r\n    \r\n    handleSubmit = evt => {\r\n        evt.preventDefault();\r\n        const { name, number } = this.state;\r\n       \r\n        this.props.addContact(name, number, inputId);\r\n\r\n        this.setState({ name: \"\", number: \"\" });   \r\n    };\r\n    \r\n    render()\r\n    {\r\n       \r\n        const { name, number } = this.state;\r\n\r\n        return (\r\n            <div >\r\n                <form className=\"form\" onSubmit={this.handleSubmit}>\r\n      \r\n      <div className=\"subtitle\">You can add new contact!</div>\r\n      <div className=\"input-container ic2\">\r\n                        <input\r\n                            id={inputId}\r\n                            className=\"input\"\r\n                            type=\"text\"\r\n                            placeholder=\" \"\r\n                            value={name}\r\n                            name=\"name\"\r\n                            onChange={this.onInputChange}\r\n                            pattern=\"^[a-zA-Zа-яА-Я]+(([' -][a-zA-Zа-яА-Я ])?[a-zA-Zа-яА-Я]*)*$\"\r\n                            title=\"Имя может состоять только из букв, апострофа, тире и пробелов. Например Adrian, Jacob Mercer, Charles de Batz de Castelmore d'Artagnan и т. п.\"\r\n                            required\r\n                        />\r\n        <div className=\"cut cut-short\"></div>\r\n        <label htmlFor={inputId} className=\"placeholder\">Name</label>\r\n      </div>\r\n      <div className=\"input-container ic2\">\r\n                        <input\r\n                            id={inputId}\r\n                            className=\"input\"\r\n                            type=\"tel\"\r\n                            placeholder=\" \"\r\n                            value={number}\r\n                            name=\"number\"\r\n                            onChange={this.onInputChange}\r\n                            pattern=\"\\+?\\d{1,4}?[-.\\s]?\\(?\\d{1,3}?\\)?[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,9}\"\r\n                            title=\"Номер телефона должен состоять из цифр и может содержать пробелы, тире, круглые скобки и может начинаться с +\"\r\n                            required\r\n                        />\r\n        <div className=\"cut\"></div>\r\n        <label htmlFor={inputId} className=\"placeholder\">Number</label>\r\n      </div>\r\n      \r\n      <button type=\"submit\" className=\"submit\">Add Contact</button>\r\n    </form>\r\n\r\n                </div>\r\n        )\r\n    };\r\n};\r\n\r\nconst mapDispatchToProps = dispatch => ({\r\n    addContact: (name, number) => dispatch(operations.addContact(name, number)),\r\n});\r\n\r\nexport default connect(null, mapDispatchToProps)(ContactForm);","import axios from 'axios';\r\nimport {\r\n    addContactsRequest,\r\n    addContactsSucces,\r\n    addContactsError,\r\n    deleteContactsRequest,\r\n    deleteContactsSucces,\r\n    deleteContactsError,\r\n    fetchContactsRequest,\r\n    fetchContactsSucces,\r\n    fetchContactsError,\r\n} from './contact-actions';\r\n\r\n\r\nexport const fetchContacts = () => async dispatch => {\r\n  dispatch(fetchContactsRequest());\r\n\r\n  try {\r\n    const { data } = await axios.get('/contacts');\r\n\r\n    dispatch(fetchContactsSucces(data));\r\n  } catch (error) {\r\n    dispatch(fetchContactsError(error.message));\r\n  }\r\n};\r\n\r\nexport const addContact = (name, number) => dispatch => {\r\n  const contact = {\r\n    name,\r\n    number,\r\n  };\r\n    dispatch(addContactsRequest());\r\n\r\n    axios.post('/contacts', contact)\r\n        .then(({data}) => dispatch(addContactsSucces(data)))\r\n        .catch(error => dispatch(addContactsError(error.message)));\r\n};\r\n\r\nexport const deleteContact = contactId => dispatch => {\r\n    dispatch(deleteContactsRequest());\r\n\r\n    axios.delete(`/contacts/${contactId}`)\r\n        .then(res => dispatch(deleteContactsSucces(contactId)))\r\n        .catch(error => dispatch(deleteContactsError(error.message)));\r\n};","import { createSelector } from '@reduxjs/toolkit';\r\n\r\nexport const getIsLoading = state => state.contacts.loading;\r\n\r\nexport const getFilter = state => state.contacts.filter;\r\n\r\nconst getAllContacts = state => state.contacts.items;\r\n\r\n// export const getVisibleContacts = state => {\r\n//     const filter = getFilter(state);\r\n//     const allContacts = getAllContacts(state);\r\n//     const normalizeFilter = filter.toLowerCase();\r\n//     return allContacts.filter(item => item.name.toLowerCase().includes(normalizeFilter));\r\n// };\r\n\r\nexport const getVisibleContacts = createSelector(\r\n    [getFilter, getAllContacts],\r\n    (filter, items) => {\r\n        const normalizeFilter = filter.toLowerCase();\r\n\r\n        return items.filter(item => item.name.toLowerCase().includes(normalizeFilter));\r\n     }\r\n);","import './ContactList.css';\r\nimport React from 'react';\r\nimport { connect } from \"react-redux\";\r\nimport * as operations from '../../redux/contacts/contact-operations';\r\nimport * as selectors from '../../redux/contacts/contact-selectors';\r\n// import shortid from \"shortid\";\r\n\r\n\r\nconst ContactList = ({ contacts, onDeleteContact }) => {\r\n    \r\n    return (\r\n\r\n        <div className=\"Contact-container\">\r\n            <ul className=\"Contact-container__list\">\r\n                {contacts.map(contact => (\r\n                    <li key={contact.id} className=\"Contact-container__item\">{contact.name}: {contact.number}\r\n                        <button onClick={() => onDeleteContact(contact.id)} className=\"Contact-list__btn\" >Delete</button>\r\n                    </li>\r\n                ))}\r\n            </ul>\r\n        </div>\r\n    )\r\n};\r\n\r\nconst mapStateToProps = state => ({\r\n    contacts: selectors.getVisibleContacts(state)\r\n});\r\n\r\nconst mapDispatchToProps = dispatch => ({\r\n    onDeleteContact: id => dispatch(operations.deleteContact(id))\r\n});\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(ContactList);","import { connect } from \"react-redux\";\r\nimport * as actions from '../../redux/contacts/contact-actions';\r\nimport * as selectors from '../../redux/contacts/contact-selectors';\r\n\r\n\r\nconst Filter = ({value, onChange}) => {\r\n\r\n    return (\r\n        <div className=\"Filter-container\">\r\n            <h3>Find contact by name</h3>\r\n            <label>\r\n                <input\r\n                    className=\"Filter-input\"\r\n                    name=\"search\"\r\n                    type=\"text\"\r\n                    value={value}\r\n                    onChange={onChange}\r\n                ></input>\r\n            </label>\r\n        </div>\r\n    )\r\n};\r\n\r\nconst mapStateToProps = (state) => ({\r\n    value: selectors.getFilter(state)\r\n});\r\n\r\nconst mapDispatchToProps = dispatch => ({\r\n    onChange: (evt) => dispatch(actions.filterContact(evt.target.value))\r\n});\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(Filter);","import { Component } from 'react';\r\nimport { connect } from 'react-redux';\r\nimport ContactForm from '../Components/ContactForm';\r\nimport ContactList from '../Components/ContactList';\r\nimport Filter from '../Components/Filter';\r\nimport * as contactOperations from \"../redux/contacts/contact-operations\"\r\n\r\nclass Contacts extends Component {\r\n\r\n    componentDidMount() {\r\n        this.props.fetchContacts();\r\n    };\r\n\r\n    render() {\r\n        return (\r\n        <div className=\"Contact-container\">\r\n      \r\n            <div className=\"Contact-form__wrapper\">\r\n                <ContactForm />\r\n            </div>\r\n            \r\n            <div className=\"Contact-list__wrapper\">\r\n                <h2>Contacts</h2>\r\n        \r\n                <Filter />\r\n        \r\n                <ContactList />\r\n            </div>\r\n          \r\n        </div>\r\n    )\r\n    };\r\n};\r\n\r\nconst mapDispatchToProps = dispatch => ({\r\n    fetchContacts: () => dispatch(contactOperations.fetchContacts())\r\n});\r\n\r\nexport default connect(null, mapDispatchToProps)(Contacts);","import React from 'react';\r\nimport { Route, Redirect } from 'react-router-dom';\r\nimport { connect } from 'react-redux';\r\nimport * as authSelectors  from '../redux/auth/auth-selectors';\r\n\r\n/**\r\n * - Если маршрут приватный и пользователь залогинен, рендерит компонент\r\n * - В противном случае рендерит Redirect на /login\r\n */\r\nconst PrivateRoute = ({\r\n  component: Component,\r\n  isAuthenticated,\r\n  redirectTo,\r\n  ...routeProps\r\n}) => (\r\n  <Route\r\n    {...routeProps}\r\n    render={props =>\r\n      isAuthenticated ? <Component {...props} /> : <Redirect to={redirectTo} />\r\n    }\r\n  />\r\n);\r\n\r\nconst mapStateToProps = state => ({\r\n  isAuthenticated: authSelectors.getAuthenticated(state),\r\n});\r\n\r\nexport default connect(mapStateToProps)(PrivateRoute);","import React from 'react';\r\nimport { Route, Redirect } from 'react-router-dom';\r\nimport { connect } from 'react-redux';\r\nimport * as authSelectors  from '../redux/auth/auth-selectors';\r\n\r\n/**\r\n * - Если маршрут ограниченный, и пользователь залогинен, рендерит редирект на /todos\r\n * - В противном случае рендерит компонент\r\n */\r\nconst PublicRoute = ({\r\n  component: Component,\r\n  isAuthenticated,\r\n  redirectTo,\r\n  ...routeProps\r\n}) => (\r\n  <Route\r\n    {...routeProps}\r\n    render={props =>\r\n      isAuthenticated && routeProps.restricted ? (\r\n        <Redirect to={redirectTo} />\r\n      ) : (\r\n        <Component {...props} />\r\n      )\r\n    }\r\n  />\r\n);\r\n\r\nconst mapStateToProps = state => ({\r\n  isAuthenticated: authSelectors.getAuthenticated(state),\r\n});\r\n\r\nexport default connect(mapStateToProps)(PublicRoute);","import { Switch } from 'react-router-dom';\nimport React, { Component } from 'react';\nimport './App.css';\nimport routes from './routes';\nimport * as authOperations from \"./redux/auth/auth-operations\";\nimport { connect } from 'react-redux';\n\n// Component\nimport NavBar from './views/NavBar';\nimport HomeView from './views/HomeView';\nimport AboutView from './views/AboutView';\nimport LoginView from './views/LoginView';\nimport SignupView from './views/SignupView';\nimport Contacts from './views/Contacts';\nimport PrivateRoute from './Components/PrivateRoute';\nimport PublicRoute from './Components/PublicRoute';\n\n\nclass App extends Component{\n\n  componentDidMount() {\n    this.props.onGetCurrentUser();\n  };\n\n  render() {\n    return (\n    <div className=\"App\">\n\n      <NavBar />\n\n      <Switch>\n        <PublicRoute path={routes.home} exact component={HomeView} />\n        <PublicRoute path={routes.about} component={AboutView} />\n        <PublicRoute path={routes.login} component={LoginView} restricted redirectTo={routes.contact} />\n        <PublicRoute path={routes.signup} component={SignupView} restricted redirectTo={routes.contact} />\n        <PrivateRoute path={routes.contact} component={Contacts} restricted redirectTo={routes.login} />\n      </Switch>\n\n    </div>\n  );\n  }\n};\n\nconst mapDispatchToProps = {\n  onGetCurrentUser: authOperations.getCurrentUser\n};\n\n\nexport default connect(null, mapDispatchToProps)(App);\n","import { combineReducers } from 'redux';\r\nimport { createReducer } from '@reduxjs/toolkit';\r\nimport authActions from './auth-actions';\r\n\r\nconst initialUserState = { name: null, email: null };\r\n\r\nconst user = createReducer(initialUserState, {\r\n  [authActions.registerSuccess]: (state, { payload }) => payload.user,\r\n  [authActions.loginSuccess]: (state, { payload }) => payload.user,\r\n  [authActions.logoutSuccess]: () => initialUserState,\r\n  [authActions.getCurrentUserSuccess]: (state, {payload}) => payload,\r\n});\r\n\r\nconst token = createReducer(null, {\r\n  [authActions.registerSuccess]: (state, { payload }) => payload.token,\r\n  [authActions.loginSuccess]: (state, { payload }) => payload.token,\r\n  [authActions.logoutSuccess]: () => null,\r\n  \r\n});\r\n\r\nconst error = createReducer(null, {\r\n  [authActions.registerError]: (state, { payload }) => payload,\r\n  [authActions.loginError]: (state, { payload }) => payload,\r\n  [authActions.logoutError]: (state, { payload }) => payload,\r\n  [authActions.getCurrentUserError]: (state, {payload}) => payload,\r\n});\r\n\r\nconst isLogedIn = createReducer(false, {\r\n  [authActions.registerSuccess]: () => true,\r\n  [authActions.loginSuccess]: () => true,\r\n  [authActions.getCurrentUserSuccess]: () => true,\r\n  [authActions.registerError]: () => false,\r\n  [authActions.loginError]: () => false,\r\n  [authActions.getCurrentUserError]: () => false,\r\n  [authActions.logoutSuccess]: () => false,\r\n})\r\n\r\nexport default combineReducers({\r\n  user,\r\n  token,\r\n  isLogedIn,\r\n  error,\r\n});","import { combineReducers } from \"redux\";\r\nimport { createReducer } from '@reduxjs/toolkit';\r\nimport {\r\n    addContactsRequest,\r\n    addContactsSucces,\r\n    addContactsError,\r\n    deleteContactsRequest,\r\n    deleteContactsSucces,\r\n    deleteContactsError,\r\n    filterContact,\r\n    fetchContactsRequest,\r\n    fetchContactsSucces,\r\n    fetchContactsError,\r\n} from './contact-actions';\r\n\r\n\r\nconst items = createReducer([], {\r\n    [fetchContactsSucces]: (state, action) => action.payload,\r\n\r\n    [addContactsSucces]: (state, action) => {\r\n        \r\n        const contactName = state.map(contact => contact.name.toLowerCase());\r\n        console.log(contactName)\r\n        if (contactName.includes(action.payload.name.toLowerCase())) {\r\n            return alert('This contact is already in your list!')\r\n        };\r\n        \r\n        return ([action.payload, ...state])\r\n    } ,\r\n\r\n    [deleteContactsSucces]: (state, action) => state.filter(contact => contact.id !== action.payload),\r\n});\r\n\r\nconst filter = createReducer('', {\r\n    [filterContact]: (state, action) => action.payload,\r\n});\r\n\r\nconst loading = createReducer(false, {\r\n    [fetchContactsRequest]: () => true,\r\n    [fetchContactsSucces]: () => false,\r\n    [fetchContactsError]: () => false,\r\n\r\n    [addContactsRequest]: () => true,\r\n    [addContactsSucces]: () => false,\r\n    [addContactsError]: () => false,\r\n\r\n    [deleteContactsRequest]: () => true,\r\n    [deleteContactsSucces]: () => false,\r\n    [deleteContactsError]: () => false,\r\n});\r\n\r\nexport default combineReducers({\r\n    items,\r\n    filter,\r\n    loading,\r\n});","\r\nimport { configureStore, getDefaultMiddleware } from \"@reduxjs/toolkit\";\r\nimport storage from 'redux-persist/lib/storage';\r\nimport authReducers from \"./auth/auth-reducers\";\r\nimport contactsReducer from \"./contacts/contact-reducer\";\r\nimport {\r\n  persistReducer,\r\n  persistStore,\r\n  FLUSH,\r\n  REHYDRATE,\r\n  PAUSE,\r\n  PERSIST,\r\n  PURGE,\r\n  REGISTER,\r\n} from 'redux-persist';\r\n \r\n\r\nconst middleware = [\r\n  ...getDefaultMiddleware({\r\n    serializableCheck: {\r\n      ignoredActions: [FLUSH, REHYDRATE, PAUSE, PERSIST, PURGE, REGISTER],\r\n    },\r\n  }),\r\n  // logger,\r\n];\r\n\r\nconst authPersistConfig = {\r\n  key: 'auth',\r\n  storage,\r\n  whitelist: ['token'],\r\n};\r\n\r\n// const contactsPersistConfig = {\r\n//   key: 'contacts',\r\n//   storage,\r\n//   blacklist: ['filter'],\r\n// };\r\n\r\nconst store = configureStore({\r\n    reducer: {\r\n        auth: persistReducer(authPersistConfig, authReducers),\r\n        contacts: contactsReducer,\r\n  },\r\n  middleware,\r\n  devTools: process.env.NODE_ENV === 'development',\r\n\r\n});\r\n\r\nconst persistor = persistStore(store);\r\n\r\nexport default { store, persistor };\r\n\r\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { BrowserRouter } from \"react-router-dom\";\nimport './index.css';\nimport App from './App';\nimport { Provider } from 'react-redux';\nimport store from './redux/store';\nimport { PersistGate } from 'redux-persist/integration/react';\n\n\nReactDOM.render(\n  <React.StrictMode>\n    <Provider store={store.store}>\n      <PersistGate loading={null} persistor={store.persistor}>\n        <BrowserRouter>\n          \n            <App />\n          \n        </BrowserRouter>\n      </PersistGate>\n    </Provider>\n  </React.StrictMode>,\n  document.getElementById('root')\n);"],"sourceRoot":""}